{"version":3,"sources":["artPhotos.js","components/ArtPhotos.js","components/Home.js","components/DigitalArts.js","components/Photography.js","App.js","serviceWorker.js","index.js"],"names":["photos","src","width","height","ArtPhotos","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","Home","DigitalArts","Photography","App","props","state","className","to","exact","path","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAAaA,EAAS,CAClB,CACIC,IAAK,kGACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,wFACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,sFACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,mGACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,2GACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,mGACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,8FACLC,MAAO,EACPC,OAAQ,I,8NCMDC,MAnCf,WAAsB,IAAD,EACuBC,mBAAS,GADhC,mBACVC,EADU,KACIC,EADJ,OAEuBF,oBAAS,GAFhC,mBAEVG,EAFU,KAEIC,EAFJ,KAIXC,EAAeC,uBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAC9CP,EAAgBO,GAChBL,GAAgB,KACjB,IAOH,OACI,6BACI,kBAAC,IAAD,CAAST,OAAQA,EAAQe,QAASL,IAClC,kBAAC,IAAD,KACKF,EACG,kBAAC,IAAD,CAAOQ,QAVD,WAClBT,EAAgB,GAChBE,GAAgB,KASA,kBAAC,IAAD,CACIQ,aAAcX,EACdY,MAAOlB,EAAOmB,KAAI,SAAAC,GAAC,O,yVAAA,IACZA,EADY,CAEfC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,cAIvB,Q,wBChCL,SAASC,IACpB,OACI,sDCDO,SAASC,IACpB,OACI,2CAGI,kBAAC,EAAD,OCNG,SAASC,IACpB,OACI,4C,IC+BOC,E,YA1Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAOjB,OACE,6BACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,0BAAvB,QACA,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,gBAAgBD,UAAU,YAAnC,qBACA,kBAAC,IAAD,CAAMC,GAAG,eAAeD,UAAU,YAAlC,iBAGJ,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,gBAAgBC,UAAWT,IAC7C,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,eAAeC,UAAWR,U,GApBpCS,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.79c49782.chunk.js","sourcesContent":["export const photos = [\r\n    {\r\n        src: \"https://raw.githubusercontent.com/DPK101/my-static-assets/master/ArtPhotos/BirdOnTreeInRain.png\",\r\n        width: 5,\r\n        height: 3\r\n    },\r\n    {\r\n        src: \"https://raw.githubusercontent.com/DPK101/my-static-assets/master/ArtPhotos/Candle.png\",\r\n        width: 4,\r\n        height: 5\r\n    },\r\n    {\r\n        src: \"https://raw.githubusercontent.com/DPK101/my-static-assets/master/ArtPhotos/Goku.png\",\r\n        width: 5,\r\n        height: 7\r\n    },\r\n    {\r\n        src: \"https://raw.githubusercontent.com/DPK101/my-static-assets/master/ArtPhotos/Landscape_IceBurg.png\",\r\n        width: 5,\r\n        height: 3\r\n    },\r\n    {\r\n        src: \"https://raw.githubusercontent.com/DPK101/my-static-assets/master/ArtPhotos/LightYagamiFromDeathNote2.png\",\r\n        width: 6,\r\n        height: 3\r\n    },\r\n    {\r\n        src: \"https://raw.githubusercontent.com/DPK101/my-static-assets/master/ArtPhotos/MangoesFromSprint.jpg\",\r\n        width: 4,\r\n        height: 3\r\n    },\r\n    {\r\n        src: \"https://raw.githubusercontent.com/DPK101/my-static-assets/master/ArtPhotos/RedWineColor.png\",\r\n        width: 5,\r\n        height: 4\r\n    }\r\n];\r\n","import React, { useState, useCallback } from \"react\";\r\nimport Gallery from \"react-photo-gallery\";\r\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\r\nimport { photos } from \"../artPhotos\";\r\n\r\nfunction ArtPhotos() {\r\n    const [currentImage, setCurrentImage] = useState(0);\r\n    const [viewerIsOpen, setViewerIsOpen] = useState(false);\r\n\r\n    const openLightbox = useCallback((event, { photo, index }) => {\r\n        setCurrentImage(index);\r\n        setViewerIsOpen(true);\r\n    }, []);\r\n\r\n    const closeLightbox = () => {\r\n        setCurrentImage(0);\r\n        setViewerIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Gallery photos={photos} onClick={openLightbox} />\r\n            <ModalGateway>\r\n                {viewerIsOpen ? (\r\n                    <Modal onClose={closeLightbox}>\r\n                        <Carousel\r\n                            currentIndex={currentImage}\r\n                            views={photos.map(x => ({\r\n                                ...x,\r\n                                srcset: x.srcSet,\r\n                                caption: x.title\r\n                            }))}\r\n                        />\r\n                    </Modal>\r\n                ) : null}\r\n            </ModalGateway>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArtPhotos;","import React from 'react'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            Home/About me, Resume\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ArtPhotos from './ArtPhotos';\r\n\r\nexport default function DigitalArts() {\r\n    return (\r\n        <div>\r\n            DigitalArts\r\n            {/* Using react-photo-gallery and react-images libraries*/}\r\n            <ArtPhotos />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Photography() {\r\n    return (\r\n        <div>\r\n            Photography\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ArtPhotos from './components/ArtPhotos';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from './components/Home';\nimport DigitalArts from './components/DigitalArts';\nimport Photography from './components/Photography';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Router>\n          <nav className=\"navbar\">\n            <Link to=\"/\" className=\"left-nav-link nav-link\">Home</Link>\n            <div className=\"right-nav-link\">\n              <Link to=\"/digital-arts\" className=\"nav-link\">Digital Art Works</Link>\n              <Link to=\"/photography\" className=\"nav-link\">Photography</Link>\n            </div>\n          </nav>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/digital-arts\" component={DigitalArts} />\n          <Route exact path=\"/photography\" component={Photography} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}